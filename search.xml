<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[微信小程序简单介绍]]></title>
      <url>http://yoursite.com/2017/01/10/miniapp1/</url>
      <content type="html"><![CDATA[<h2 id="1-什么是小程序"><a href="#1-什么是小程序" class="headerlink" title="1.什么是小程序"></a>1.什么是小程序</h2><blockquote>
<p>基于微信平台的一种无需下载安装即可使用的手机应用，根据微信平台上提供的api，可以实现很多app的常见功能，从目前体验来看使用效果与原生区别不大</p>
</blockquote>
<h2 id="2-如何获得和使用小程序？"><a href="#2-如何获得和使用小程序？" class="headerlink" title="2.如何获得和使用小程序？"></a>2.如何获得和使用小程序？</h2><p><strong>首先要把手机微信更新到最新的版本</strong><br>当我们还没有使用过小程序时，小程序在微信中是没有明显的入口的，目前我所知道的有6个获得小程序的途径:</p>
<ol>
<li>通过好友和微信群分享小程序，但是不能通过朋友圈分享<img src="http://p1.bpimg.com/1949/48bf47a643356cdc.png" alt="好友与群分享"></li>
<li>在微信搜索框中输入准确的小程序名字可以搜索到小程序<br><img src="http://i1.piimg.com/1949/a6c0fa8ff8fff53c.png" alt="搜索"></li>
<li>线下扫码直接进入小程序</li>
<li>通过绑定了小程序的公众号入口进入小程序</li>
<li>张小龙称小程序就像公众号一样，不会专门提供类似于appstore的小程序商城，但是目前已有第一家第三方的小程序商城，<a href="https://minapp.com" target="_blank" rel="external">知晓程序</a>， 推荐实用小程序：<code>草料二维码</code>、<code>极简汇率</code><img src="http://p1.bpimg.com/1949/2fa04447e63fa45d.png" alt="二维码"></li>
<li>你所有使用过的小程序都可以在<code>发现-小程序</code>中打开<img src="http://i1.piimg.com/1949/9e2c5733e7be580a.png" alt="发现-小程序"><img src="http://i1.piimg.com/1949/96510d9372b36ff6.png" alt="小程序列表"></li>
</ol>
<h2 id="3-小程序的前景"><a href="#3-小程序的前景" class="headerlink" title="3.小程序的前景"></a>3.小程序的前景</h2><p>目前还不能预测小程序的前景一定会怎么样，但是在微信公众号刚推出时同样也没人预料到微信公众号会像现在这样被如此广泛地使用。微信平台有巨大的用户群体，不管小程序未来情况如何，都将会有大量公司企业着手小程序的开发，特别是现有公众号的机构，小程序可以作为公众号功能的一个良好拓展。<br>对于我们前端开发人员来说，小程序也是多了一个工作的方向与机会。<img src="http://p1.bqimg.com/1949/5992fc210b4a83b4.png" alt="Markdown">该图来源于微信平台官方的小程序教程，可以看到小程序页面是由由同路径下同名的四个不同后缀文件的组成，如：<code>index.js</code>、<code>index.wxml</code>、<code>index.wxss</code>、<code>index.json</code>。其核心仍然是我们最常用的javascript,同时wxml、wxss也非常类似于html与css，所以我们可以花费相比其他岗位更少的学习成本就能熟悉与掌握微信小程序的开发。<br>对小程序开发有兴趣的朋友可以从<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html" target="_blank" rel="external">官方说明</a>开始一步一步进行学习。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浏览器中Javascript引擎解读代码的步骤]]></title>
      <url>http://yoursite.com/2015/04/15/JS03/</url>
      <content type="html"><![CDATA[<p><strong>1.</strong>根据一些关键字来找东西（<code>var</code>、<code>function</code>），找到后存到<code>仓库</code>里面去（属于JS的预解析工作）。<br>找东西的规则：</p>
<blockquote>
<p>a. 如果是变量，就直接先赋值undefined；如果是函数块，就直接保存函数块<br> b. 如果变量和函数名重名，则保留函数块<br> c. 若函数块同名，后读取的覆盖先读取的</p>
</blockquote>
<p><strong>2.</strong>逐行执行代码，从上到下，从仓库中寻找变量及函数，如果代码中有赋值的部分，就会对仓库中已存的进行对应的赋值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用mongoose向数据库添加数据三部曲]]></title>
      <url>http://yoursite.com/2015/03/29/NodeJs03/</url>
      <content type="html"><![CDATA[<h2 id="1-连接数据库"><a href="#1-连接数据库" class="headerlink" title="1.连接数据库"></a>1.连接数据库</h2><p>使用mongoose连接数据库的前提条件是：</p>
<ol>
<li>mongo数据库已经运行。</li>
<li>已经安装了mongoose包。<code>npm install mongoose --save</code></li>
</ol>
<pre><code>var mongoose = require(&quot;mongoose&quot;);
mongoose.connect(&apos;mongodb://localhost/student&apos;);
//连接字符串格式为mongodb://主机/数据库名;
</code></pre><p>上面这句的意思是连接到本地的mongodb的student表。</p>
<h2 id="2-新增数据"><a href="#2-新增数据" class="headerlink" title="2.新增数据"></a>2.新增数据</h2><p>存储数据步骤：定义Schema- (模式)&gt;创建model-(模型)&gt;实例化方法</p>
<pre><code>var Schema = mongoose.Schema;
//通过Schema创建一个模式NewsSchema
var studentSchema = new Schema({      
    name: String,
     age: Number
});
//通过模式studentSchema  创建一个数据模型studentModel 
var studentModel = mongoose.model(&quot;students&quot;,studentSchema);
var instance1 = new studentModel ({
    name:&quot;Joe&quot;,
    age:18
}); 
</code></pre><h2 id="3-向数据库存储创建的数据"><a href="#3-向数据库存储创建的数据" class="headerlink" title="3.向数据库存储创建的数据"></a>3.向数据库存储创建的数据</h2><p>最后将创建的数据通过其自带的save方法存储到数据库中</p>
<pre><code>//通过save方法保存
instance1.save(function(err){
    if (err) {
       console.log(&quot;保存失败&quot;);  
       return;
    }
 });
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对JavaScript中一些概念的理解（二）]]></title>
      <url>http://yoursite.com/2015/03/13/JS02/</url>
      <content type="html"><![CDATA[<h2 id="1-匿名函数"><a href="#1-匿名函数" class="headerlink" title="1.匿名函数"></a>1.匿名函数</h2><p>只有<code>function(){}</code>没有名称标识符的就是匿名函数，优点是书写简单便捷，缺点是因为在内存栈中没有有意义的函数名，所以调试困难，另外就是没有函数名，就缺乏一个对该段代码的描述，降低了一定的可读性。</p>
<h2 id="2-回调函数"><a href="#2-回调函数" class="headerlink" title="2.回调函数"></a>2.回调函数</h2><p>回调函数是指传一个函数指针作为参数传到另一个函数中，另一个函数会在需要时执行这个函数的一种方式。</p>
<h2 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3.闭包"></a>3.闭包</h2><p><strong>闭包就是一种私有化变量的方法</strong>，比如：函数中嵌套函数，内部的函数可以使用外部函数的参数或变量，并且参数或变量不会被js垃圾回收机制收回。</p>
<p>当希望变量能长期驻扎在内存中，又不想设置其为全局变量（容易发生全局变量污染），可以用闭包来实现</p>
<p>又比如：通过一个自执行函数，将全局变量传到函数内部接受，就可以在函数内部私有化这个变量，而且不会影响外部<code>(function($){console,log($);})(jQuery)</code></p>
<h2 id="4-惰性载入"><a href="#4-惰性载入" class="headerlink" title="4.惰性载入"></a>4.惰性载入</h2><p>这是一种性能优化的思想，比如我们再执行一个函数时，该函数需要对浏览器的不同类型作出不同的反应，那么每次执行该函数都要执行一次判断就会很浪费性能，因为在页面浏览过程中也不会中途更换浏览器，所以可以在第一次执行函数时执行判断，然后就更新函数内容，这样就只判断一次，优化了性能。</p>
<p><strong>最好也不要把函数设置为在载入时自动执行判断来更新函数内容</strong>，打个比方，jQuery中有非常多的方法，内部会判断运行环境作兼容性处理，如果每一个函数都在载入时自动判断一次，那么就非常消耗性能，我们在使用jQuery时不会用到每一个功能，那么只有在使用这个功能时才进行兼容性的判断，那么就节约了性能，这也就是所谓的惰性载入的思想。</p>
<h2 id="5-this"><a href="#5-this" class="headerlink" title="5.this"></a>5.this</h2><p>在用面向对象的思想进行程序编写时，每一个this的指向是最大的难点，我们在编写时应该理清代码的顺序，同时注意一点：<strong>函数里的this指代的当前调用函数的对象，如果是最外层或者表面上没有人调用，那么this就指向window</strong>。</p>
<p>如果在一些函数内部的this不是我们希望指代的对象，我们可以通过传参数等方式将我们希望指代的对象传进去。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对JavaScript中一些概念的理解（一）]]></title>
      <url>http://yoursite.com/2015/02/27/JS01/</url>
      <content type="html"><![CDATA[<h2 id="1-对面向对象的理解"><a href="#1-对面向对象的理解" class="headerlink" title="1.对面向对象的理解"></a>1.对面向对象的理解</h2><p> 首先，对象是对实际事物的一个抽象，它包括了属性和方法两个概念，比如对于一个人来说，他的属性有姓名、身高、年龄等等，方法有吃饭，走路，跑步等等。对于万物都可以看作一个对象。</p>
<p> 在编程中主要分为<code>面向过程(pop)</code>和<code>面向对象(oop)</code>两大类，pop主要重视做事的过程，oop是关注参与者和他们的行为，形象一点说，比如我们在编写一段选项卡功能时，pop就是针对这一选项卡的功能来针对性地写代码，oop则是编写这一个选项卡对象，在编写难度上oop更高一些，但是它的特点在于可以复用代码，适合于模块化编写，一个页面中有多个选项卡都可以使用这一个对象，并为其增加个性化设置，而pop则需要根据不同选项卡进行多次代码编写，这也就是oop的好处。</p>
<h2 id="2-json"><a href="#2-json" class="headerlink" title="2.json"></a>2.json</h2><p>json是js对象表示法，它的内容以键值对的方式存在，它的主要用途在于存储和交换信息，我们前端工作中主要利用json字符串与后台服务器数据库进行数据交换，它的优点在于它是轻量级文本数据交换格式，可被多种程序语言解读，比XML更小更快更易解析，也天生是一个js对象。</p>
<p><strong>注意：json字符串中键名必须以双引号包裹，否则会在识别时出错</strong></p>
<h2 id="3-原型prototype"><a href="#3-原型prototype" class="headerlink" title="3.原型prototype"></a>3.原型prototype</h2><p>JS中各种类型的对象都有一个prototype属性，这个属性本身是一个object类型的对象，它包含了很多属性与方法，同时我们也可以为不同类型对象的prototype属性添加特定的属性与方法，如通过:<code>构造函数.prototype.方法 = function(){}</code>;</p>
<p><strong>注意：若在window.onload中对一些对象调用原型中的方法，但是这些方法是在这些代码下方设置的，就会报错。可以将这些设置prototype方法的代码写在window.onload外部或者写在内部的上方。</strong></p>
<h2 id="4-编译原理"><a href="#4-编译原理" class="headerlink" title="4.编译原理"></a>4.编译原理</h2><p>浏览器在解读JS代码时有一个顺序，首先会进行一次预编译，通过对var function等关键字的查询，找到变量或者函数，放到一个仓库中，变量先为其设置undefined为初始值，函数就存一个空的代码块，然后再逐行执行代码。</p>
<p><strong>注意：在逐行执行代码时，遇到赋值的时候会根据变量名对存在仓库中的变量或函数进行赋值，但是如果遇到变量与函数同名，则会用函数内容覆盖变量内容，如果遇到有同名的函数，就会用后载入的函数覆盖先载入的的。</strong></p>
<h2 id="5-递归函数"><a href="#5-递归函数" class="headerlink" title="5.递归函数"></a>5.递归函数</h2><p>简单来说，递归函数就是在函数中调用自身这个函数，递归必须有入口和出口，就是说什么时候调用自己，什么时候不调用，否则会形成死循环，递归主要用在解决树状结构类似问题，如读取文件目录，货品分类树等。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs中的Buffer类]]></title>
      <url>http://yoursite.com/2015/02/16/NodeJs02/</url>
      <content type="html"><![CDATA[<h3 id="1-Buffer-是什么"><a href="#1-Buffer-是什么" class="headerlink" title="1 Buffer 是什么?"></a>1 Buffer 是什么?</h3><p>所谓缓冲区Buffer，就是 “临时存贮区” 的意思，是暂时存放输入输出数据的一段内存。</p>
<p>JS语言自身只有字符串数据类型，没有二进制数据类型，因此NodeJS提供了一个与String对等的全局构造函数Buffer来提供对二进制数据的操作。</p>
<h3 id="2-Buffer-怎样用？"><a href="#2-Buffer-怎样用？" class="headerlink" title="2 Buffer 怎样用？"></a>2 Buffer 怎样用？</h3><p>Buffer的形式类似于数组，具有下标，长度等特性</p>
<h3 id="3-如何去创建？"><a href="#3-如何去创建？" class="headerlink" title="3 如何去创建？"></a>3 如何去创建？</h3><p><code>new Buffer(长度)</code>  可以根据下标来赋值<br><strong>注意：长度只要定义了就不能增加</strong></p>
<p><code>new Buffer(数组)</code>  把数组里面对应下标的值，赋值给Buffer对应下标的值</p>
<p><code>new Buffer(&quot;字符串&quot;，&quot;utf-8&quot;)</code> 向Buffer赋值字符串，需要设置编码</p>
<h3 id="4-Buffer与字符串的一点区别"><a href="#4-Buffer与字符串的一点区别" class="headerlink" title="4 Buffer与字符串的一点区别"></a>4 Buffer与字符串的一点区别</h3><p>Buffer与字符串有一个重要区别。字符串是只读的，并且对字符串的任何修改得到的都是一个新字符串，原字符串保持不变。</p>
<p>至于Buffer，更像是可以做指针操作的C语言数组。例如，可以用[index]方式直接修改某个位置的字节。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm与nrm的一些基础操作命令]]></title>
      <url>http://yoursite.com/2015/02/02/NodeJs01/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>工欲善其事，必先利其器，要顺利使用NodeJs的各种模块包，我们就必须熟悉npm及其换源工具nrm的操作指令</p>
</blockquote>
<h2 id="1-npm操作："><a href="#1-npm操作：" class="headerlink" title="1.npm操作："></a>1.npm操作：</h2><p><code>npm init</code> 初始化一个新的package.json<br><code>npm install 包名</code> 安装模块<br><code>npm install -g</code> 全局安装模块<br><code>npm install 包名称  --save-dev</code>  把当前安装的这个包自动添加到package.json的文件夹中<br><strong>注意：如果<code>npm install</code>后面没有给具体的包名称，就会默认去<code>package.json</code>下安装<code>devDependencies</code>下所有的包</strong><br><code>npm adduser 用户名</code> 登录npm<br><code>npm publish</code> 把当前路径的包发布到npm<br><strong>注意2：必须把源切换回npm才能登录和上传</strong><br><strong>注意3：如果包名字重合了，必须在package.json中修改name值再重新上传</strong></p>
<h2 id="2-npm换源插件nrm的操作："><a href="#2-npm换源插件nrm的操作：" class="headerlink" title="2.npm换源插件nrm的操作："></a>2.npm换源插件nrm的操作：</h2><blockquote>
<p>nrm很好地解决了国内使用npm官方源下载缓慢的问题，以下是它的常用使用命令</p>
</blockquote>
<p><code>npm install -g nrm</code> ：安装nrm<br><code>nrm ls</code> ： 显示源列表，源名前有#号的是正在使用的源<br><code>nrm use 源名</code> ：使用该源<br><code>nrm test 源名</code> ： 测试源响应时间</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World!]]></title>
      <url>http://yoursite.com/2015/01/29/hello/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“起初,神创造天地”“地是空虚混沌，渊面黑暗； 神的灵运行在水面上”“神说：“要有光。”就有了光”“神看光是好的，就把光暗分开了”“神称光为“昼”，称暗为“夜”。有晚上，有早晨，这是头一日”(创1:1-1:5)。</p>
</blockquote>
<p>The first article.<br>一切的开端。</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>http://yoursite.com/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是朱越。欢迎来到我的个人网站！<br>我搭建这个博客的目的在于记录我在学习编程技术过程中的收获、体会和总结，并分享给大家，如果我的文章对大家有一丝的帮助，我不胜荣幸。当然，偶尔也分享生活^.^</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>http://yoursite.com/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
