<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[css3属性计算函数calc()简介]]></title>
      <url>http://yoursite.com/2016/08/20/css3-02/</url>
      <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>平时在制作页面的时候，总会碰到有的元素是100%的宽度。众所周知，如果元素宽度为100%时，其自身不带其他盒模型属性设置还好，要是有别的，那将导致盒子撑破。比如说，有一个边框，或者说有<code>margin</code>和<code>padding</code>，这些都会让你的盒子撑破。我们换句话来说，如果你的元素宽度是100%时，只要你在元素中添加了<code>border</code>,<code>padding</code>,<code>margin</code>任何一值，都将会把元素盒子撑破（标准模式下，除IE怪异模式）。这样一来就会相当的麻烦，平时我们碰到这样的现象时，也是相当的谨慎，有时甚至无法解决，只能通过改变结构来实现。就算你通过繁琐的方法实现了，但有于浏览器的兼容性而导致最终效果不一致。虽然CSS3属性中的<code>box-sizing</code>在一定程度上解决这样的问题，其实<code>calc()</code>函数功能实现上面的效果来得更简单。</p>
<p><code>calc()</code>从字面我们可以把他理解为一个函数function。其实calc是英文单词calculate(计算)的缩写，是css3的一个新增的功能，用来指定元素的长度。比如说，你可以使用calc()给元素的border、margin、pading、font-size和width等属性设置动态值。为何说是动态值呢?因为我们使用的表达式来得到的值。不过calc()最大的好处就是用在流式布局上，可以通过calc()计算得到元素的宽度。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><p>在less下calc()可以这样应用</p>
<pre><code>.class{
         width:e(&apos;calc(100% - 20px)&apos;);
     }
     .class{
         height:calc(~&quot;100% - 50px&quot;);
     }
     .class {
       @cap: 50px;
       height: calc(~&quot;100% - @{cap}&quot;);
     }
</code></pre><p> calc()可以使用数学运算中的简单加（+）、减（-）、乘（*）和除（/）来解决问题，而且还可以根据单位如px,em,rem和百分比来转化计算</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WOW.js在页面滚动时展现CSS3动画效果]]></title>
      <url>http://yoursite.com/2016/06/18/jQuery02/</url>
      <content type="html"><![CDATA[<h2 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h2><p>功能强大的CSS3动画<code>animation</code>允许我们为页面中的元素添加许多炫酷的动态效果，但是通过animation属性添加的动画，在页面刷新时就会执行，有时候我们的需求时当页面滚动到元素显示的位置才执行该动画，这时候就是这款简洁的基于原生Javascript编写的插件<code>WOW.js</code>登场的时候了。</p>
<h2 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h2><p>1.引入文件</p>
<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/animate.min.css&quot;&gt;
&lt;script src=&quot;js/wow.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</code></pre><p>2.HTML</p>
<pre><code>&lt;div class=&quot;wow slideInLeft&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;wow slideInRight&quot;&gt;&lt;/div&gt;
</code></pre><p>3.Javascript  </p>
<pre><code>var wow = new WOW({
    boxClass: &apos;wow&apos;,//需要为执行的元素添加的类名
    animateClass: &apos;animated&apos;,//相关的动画库
    offset: 0,//距离可视区域多少时开始执行动画
    mobile: true,//是否在移动设备上执行动画
    live: true//异步加载内容是否有效
});
wow.init();
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript的类型检测]]></title>
      <url>http://yoursite.com/2016/05/19/JS05/</url>
      <content type="html"><![CDATA[<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>适合基本类型及function检测，遇到null失效。</p>
<pre><code>typeof 45 ;// 返回字符串 &quot;numebr&quot;
typeof true;// 返回字符串 &quot;boolean&quot;
typeof function;// 返回字符串 &quot;function&quot;
typeof(undefined);// 返回字符串&quot;undefined&quot;
typeof new Object();// 返回字符串&quot;object&quot;
typeof [4,3];//返回字符串&quot;object&quot;
typeof NaN;//返回字符串&quot;number&quot;
typeof null;//返回字符串&quot;object&quot;
</code></pre><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>适合自定义对象，也可以用来检测原生对象，在不同iframe和window间检测时失效。</p>
<pre><code>[2,5] instanceof Array === true
new Object() instanceof Array === false
</code></pre><h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString"></a>Object.prototype.toString</h2><p>通过{}.toString 拿到，适合内置对象和基元类型，遇到null和undefined失效（IE678等返回[object Object]）。</p>
<pre><code>Object.prototype.toString.apply([]); === &quot;[object Array]&quot;;
Object.prototype.toString.apply(function(){}); === &quot;[object Function]&quot;;
Object.prototype.toString.apply(null); === &quot;[object Null]&quot;
Object.prototype.toString.apply(undefined); === &quot;[object Undefined]&quot;;
//IE6/7/8 Object.prototype.toString.apply(null) 返回 &quot;[object Object]&quot;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用JS打开新窗口，防止被浏览器阻止的方法]]></title>
      <url>http://yoursite.com/2016/04/17/jQuery01/</url>
      <content type="html"><![CDATA[<h2 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h2><p>相信做web前端或者使用JS的朋友都会遇到需要在新窗口打开页面的情况，现在浏览器大都具有弹出窗口拦截功能，所以传统的window.open()不再那么好用了。借鉴于网上查到的方法和我个人的实践，把弹出新窗口的方法给大伙都介绍一下。</p>
<h2 id="2-方法一"><a href="#2-方法一" class="headerlink" title="2.方法一"></a>2.方法一</h2><p>使用原生<code>JavaScript</code>的<code>window.open()</code>方法（大部分情况下会被浏览自阻止）</p>
<h2 id="3-方法二"><a href="#3-方法二" class="headerlink" title="3.方法二"></a>3.方法二</h2><p>模拟<code>表单(form)</code>提交，原理是指定表单的action为想要打开的URL地址，target设置为”_blank”不过模拟表单提交的方法经很多网友反映说也会被阻止</p>
<h2 id="4-方法三"><a href="#4-方法三" class="headerlink" title="4.方法三"></a>4.方法三</h2><p>模拟超链接a标签被点击，用jQuery的写法如下，注意最后openLink[0]是模拟的原生DOM对象被点击的（使用Jquery对象的话没反应）</p>
<pre><code>var openLink = $(&quot;&quot;);  
openLink.attr(&apos;href&apos;, &apos;URL地址&apos;);  
openLink[0].click(); 
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于js中call(), apply(), bind()简单的解释]]></title>
      <url>http://yoursite.com/2016/02/23/JS04/</url>
      <content type="html"><![CDATA[<h2 id="1-call"><a href="#1-call" class="headerlink" title="1.call()"></a>1.call()</h2><pre><code>var obj = {&quot;num&quot;:2};
var addToThis = function(a,b,c){
    return this.num + a + b + c;                    
};

var result = addToThis.call(obj,1,2,3);

console.log(result);
// 2 + 1 + 2 + 3
//8
</code></pre><p>对于上面的例子，call()方法让对象obj使用了addToThis方法，一般格式为 fun.call(thisArg, arg1, arg2 …..) ，意思就是说让thisArg可以使用fun方法，后面的arg1，arg2…就是传入fun方法的参数。</p>
<h2 id="2-apply"><a href="#2-apply" class="headerlink" title="2.apply()"></a>2.apply()</h2><pre><code>var obj = {&quot;num&quot;:2};
var addToThis = function(a,b,c){
    return this.num + a + b + c;                    
};

var array = [1,2,3];

var result = addToThis.apply(obj,array);

console.log(result);
// 2 + 1 + 2 + 3
//8
</code></pre><p>apply()方法和call()方法达成的效果一样，只不过传入其中的参数略有不同 fun.apply(obj,[arg1,arg2….]) ，只有两个参数，第二个参数为数组，用来存储需要传入fun方法的参数</p>
<h2 id="3-bind"><a href="#3-bind" class="headerlink" title="3.bind()"></a>3.bind()</h2><pre><code>var obj = {&quot;num&quot;:2};
var addToThis = function(a,b,c){
    return this.num + a + b + c;                    
};

var result = addToThis.bind(obj);
console.log(result(1,2,3));
//8
</code></pre><p>bind()方法会产生一个新的函数，函数中的this关键字已经被赋过值了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AJAX写法总结]]></title>
      <url>http://yoursite.com/2016/01/19/AJAX01/</url>
      <content type="html"><![CDATA[<h2 id="1-原生AJAX"><a href="#1-原生AJAX" class="headerlink" title="1.原生AJAX"></a>1.原生AJAX</h2><p>所有的库、框架中的AJAX方法都是基于原生AJAX封装的，虽然我们在实际工作中会更多地利用这些封装好的方法进行方便使用，但是我们也应该了解其底层是怎么工作的。</p>
<pre><code>   var ajax=new XMLHttpRequest();
   ajax.open(&apos;GET&apos;,&apos;请求的网址&apos;,是否异步); //构造AJAX请求
   ajax.onreadystatechange=function(){ //当AJAX引擎状态产生改变时，执行相应的函数
//判断AJAX引擎的状态是否就绪 （ajax.readyState==4）同时必须判断服务器的响应数据是否正常(ajax.status==200)
       if(ajax.readyState==4 &amp;&amp; ajax.status==200){
           console.log(ajax.responseText);//接收响应回来的数据 ajax.responseText
        }
   }
   ajax.send(); //发送AJAX请求
</code></pre><h2 id="2-基于jQuery的AJAX请求"><a href="#2-基于jQuery的AJAX请求" class="headerlink" title="2.基于jQuery的AJAX请求"></a>2.基于jQuery的AJAX请求</h2><p>jQuery中封装的AJAX请求，常用的主要是<code>$.get()</code>、<code>$.post()</code>、<code>$.ajax()</code>三种，前两者是比较简化的AJAX的get以及post的方法，第三种可填写参数比较多，如果涉及到ajax跨域请求，需要使用第三种方法。</p>
<pre><code>$.get(&apos;请求的网址,可以拼接参数&apos;,function(data){});
$.post(&apos;请求的网址&apos;,{传递的参数列表,JSON格式},function(data){});
$.ajax({
    &quot;url&quot;:&quot;请求的网址&quot;,
    &quot;type&quot;:&quot;get&quot;,
    &quot;dataType&quot;:&quot;html&quot;,
    &quot;success&quot;:function(data){
        //成功以后调用的语句块
    }
});
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3中Flex伸缩布局的属性简介]]></title>
      <url>http://yoursite.com/2015/12/26/css3-01/</url>
      <content type="html"><![CDATA[<h2 id="1-flexbox"><a href="#1-flexbox" class="headerlink" title="1.flexbox"></a>1.flexbox</h2><blockquote>
<p>flexbox是CSS3中经过几年制定后推出的最新的弹性式布局方式，它解决了传统布局方式中难以解决的“垂直居中”等痛点，同时还非常灵活，可用性强，在进行移动端响应式布局时很适合使用。</p>
</blockquote>
<h2 id="2-flex针对父级元素的属性"><a href="#2-flex针对父级元素的属性" class="headerlink" title="2.flex针对父级元素的属性"></a>2.flex针对父级元素的属性</h2><p><strong>2.1 <code>flex-direction</code> 布局方向</strong><br><code>row</code> : 默认的，从左向右延伸<br><code>row-reverse</code>: 从右向左延伸<br><code>column</code>: 从上向下延伸<br><code>column-reverse</code>: 从下向上延伸</p>
<p><strong>2.2 <code>flex-wrap</code> 超出后是否换行</strong><br><code>nowrap</code> : 默认值，不换行，强制将超出部分平均压缩，让效果不超出<br><code>wrap</code>: 换行，一行装不下，自动换行<br><code>wrap-reverse</code>: 可以换行，并且反转</p>
<p><strong>2.3 <code>flex-flow</code> 复合属性，前面两属性的综合体</strong></p>
<p><strong>2.4 <code>justify-content</code> 水平对齐方式</strong><br><code>flex-start</code>: 起始点对齐（左对齐）<br><code>flex-end</code>: 结束点对齐（右对齐）<br><code>center</code>: 居中对齐<br><code>space-between</code>: 两端对齐<br><code>space-around</code>: 环绕对齐</p>
<p><strong>2.5 <code>lign-items</code> 项目侧轴对齐方式（垂直对齐）</strong><br><code>flex-start</code>: 起始点对齐（顶端对齐）<br><code>flex-end</code>: 结束点对齐（底端对齐）<br><code>center</code>: 居中对齐<br><code>baseline</code>: 基线对齐<br><strong>注意：如果是多行，则平均分配高度，每行当成一个项目，在项目内进行排列</strong></p>
<p>2<strong>2.6 <code>align-content</code> 内容的侧轴对齐方式</strong><br><code>flex-start</code>: 起始点对齐（顶端对齐）<br><code>flex-end</code>: 结束点对齐（底端对齐）<br><code>center</code>: 居中对齐<br><code>space-between</code>: 两端对齐<br><code>space-around</code>: 环绕对齐<br><strong>注意：将内容（不管是几行）当成是一个内容来看待，在盒子内一起排列</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5中input标签的新类型]]></title>
      <url>http://yoursite.com/2015/11/16/HTML01/</url>
      <content type="html"><![CDATA[<h3 id="1-color"><a href="#1-color" class="headerlink" title="1.color"></a>1.color</h3><p>生成一个拾色器</p>
<h3 id="2-Date"><a href="#2-Date" class="headerlink" title="2.Date"></a>2.Date</h3><p>将输入框变成日期输入框</p>
<h3 id="3-datetime-local"><a href="#3-datetime-local" class="headerlink" title="3.datetime-local"></a>3.datetime-local</h3><p>日期及时间输入框</p>
<h3 id="4-month"><a href="#4-month" class="headerlink" title="4.month"></a>4.month</h3><p>月份输入框</p>
<h3 id="5-time"><a href="#5-time" class="headerlink" title="5.time"></a>5.time</h3><p>时间输入框</p>
<h3 id="6-week"><a href="#6-week" class="headerlink" title="6.week"></a>6.week</h3><p>周输入框</p>
<h3 id="7-email"><a href="#7-email" class="headerlink" title="7.email"></a>7.email</h3><p>邮箱地址输入框，<strong>注意：在提交时该input框会验证邮箱格式的有效性，必须包含@，但是没有其他要求</strong></p>
<h3 id="8-number"><a href="#8-number" class="headerlink" title="8.number"></a>8.number</h3><p>数字输入框，该input框只能输入数字，可加属性<code>min</code>、<code>max</code>，来赋值设置输入范围，加属性<code>step</code>，来设置每次增减的值（步长）</p>
<h3 id="9-range"><a href="#9-range" class="headerlink" title="9.range"></a>9.range</h3><p>区间输入框，可以配合<code>oninput</code>事件，实现一边选择一边查看数值的功能</p>
<h3 id="10-search"><a href="#10-search" class="headerlink" title="10.search"></a>10.search</h3><p>搜索输入框，输入内容后会有删除内容的按钮。</p>
<h3 id="11-tel"><a href="#11-tel" class="headerlink" title="11.tel"></a>11.tel</h3><p>与text输入框并没有区别</p>
<h3 id="12-url"><a href="#12-url" class="headerlink" title="12.url"></a>12.url</h3><p>网址输入框，要求使用<code>http://</code>开头输入数据</p>
<h3 id="13-datalist"><a href="#13-datalist" class="headerlink" title="13.datalist"></a>13.datalist</h3><ol>
<li>在input输入框中定义list属性，指向到datalist的ID</li>
<li>创建datalist标签，设置option子标签，设置ID值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; list=&quot;city&quot; /&gt;</div><div class="line">    &lt;datalist id=&quot;city&quot;&gt;</div><div class="line">        &lt;option value=&quot;北京&quot;&gt;北京&lt;/option&gt;</div><div class="line">        &lt;option value=&quot;成都&quot;&gt;成都&lt;/option&gt;</div><div class="line">        &lt;option value=&quot;广州&quot;&gt;广州&lt;/option&gt;</div><div class="line">        &lt;option value=&quot;上海&quot;&gt;上海&lt;/option&gt;</div><div class="line">        &lt;option value=&quot;深圳&quot;&gt;深圳&lt;/option&gt;</div><div class="line">        &lt;option value=&quot;杭州&quot;&gt;杭州&lt;/option&gt;</div><div class="line">    &lt;/datalist&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="支持程度"><a href="#支持程度" class="headerlink" title="支持程度"></a>支持程度</h3><p>目前新的特性各大浏览器支持程度各不相同，自测PC端chrome浏览器支持较好，火狐浏览器部分支持，IE9以下浏览器全部不支持，在移动端支持程度较好。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用mongoose对mongoDB数据库进行增删改查操作]]></title>
      <url>http://yoursite.com/2015/10/27/NodeJs04/</url>
      <content type="html"><![CDATA[<h2 id="1-增加数据"><a href="#1-增加数据" class="headerlink" title="1.增加数据"></a>1.增加数据</h2><pre><code>var data=new adminModel();
data.username=username;
data.password=password;
data.save(function(){});
</code></pre><h2 id="2-删除数据"><a href="#2-删除数据" class="headerlink" title="2.删除数据"></a>2.删除数据</h2><pre><code>adminModel.find({条件},function(err,data){
    data[0].remove(function(err){});
});
</code></pre><h2 id="3-修改数据"><a href="#3-修改数据" class="headerlink" title="3.修改数据"></a>3.修改数据</h2><pre><code>adminModel.find({条件},function(err,data){
    data[0].username=newusername;
    data[0].password=newpassword;
    data[0].save(function(err){});
});
</code></pre><h2 id="4-查看数据"><a href="#4-查看数据" class="headerlink" title="4.查看数据"></a>4.查看数据</h2><pre><code>adminModel.find({条件},function(err,data){
    //data就是已经找到的数据
}); 
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浏览器中Javascript引擎解读代码的步骤]]></title>
      <url>http://yoursite.com/2015/10/15/JS03/</url>
      <content type="html"><![CDATA[<p><strong>1.</strong>根据一些关键字来找东西（<code>var</code>、<code>function</code>），找到后存到<code>仓库</code>里面去（属于JS的预解析工作）。<br>找东西的规则：</p>
<blockquote>
<p>a. 如果是变量，就直接先赋值undefined；如果是函数块，就直接保存函数块<br> b. 如果变量和函数名重名，则保留函数块<br> c. 若函数块同名，后读取的覆盖先读取的</p>
</blockquote>
<p><strong>2.</strong>逐行执行代码，从上到下，从仓库中寻找变量及函数，如果代码中有赋值的部分，就会对仓库中已存的进行对应的赋值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用mongoose向数据库添加数据三部曲]]></title>
      <url>http://yoursite.com/2015/09/29/NodeJs03/</url>
      <content type="html"><![CDATA[<h2 id="1-连接数据库"><a href="#1-连接数据库" class="headerlink" title="1.连接数据库"></a>1.连接数据库</h2><p>使用mongoose连接数据库的前提条件是：</p>
<ol>
<li>mongo数据库已经运行。</li>
<li>已经安装了mongoose包。<code>npm install mongoose --save</code></li>
</ol>
<pre><code>var mongoose = require(&quot;mongoose&quot;);
mongoose.connect(&apos;mongodb://localhost/student&apos;);
//连接字符串格式为mongodb://主机/数据库名;
</code></pre><p>上面这句的意思是连接到本地的mongodb的student表。</p>
<h2 id="2-新增数据"><a href="#2-新增数据" class="headerlink" title="2.新增数据"></a>2.新增数据</h2><p>存储数据步骤：定义Schema- (模式)&gt;创建model-(模型)&gt;实例化方法</p>
<pre><code>var Schema = mongoose.Schema;
//通过Schema创建一个模式NewsSchema
var studentSchema = new Schema({      
    name: String,
     age: Number
});
//通过模式studentSchema  创建一个数据模型studentModel 
var studentModel = mongoose.model(&quot;students&quot;,studentSchema);
var instance1 = new studentModel ({
    name:&quot;Joe&quot;,
    age:18
}); 
</code></pre><h2 id="3-向数据库存储创建的数据"><a href="#3-向数据库存储创建的数据" class="headerlink" title="3.向数据库存储创建的数据"></a>3.向数据库存储创建的数据</h2><p>最后将创建的数据通过其自带的save方法存储到数据库中</p>
<pre><code>//通过save方法保存
instance1.save(function(err){
    if (err) {
       console.log(&quot;保存失败&quot;);  
       return;
    }
 });
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对JavaScript中一些概念的理解（二）]]></title>
      <url>http://yoursite.com/2015/09/13/JS02/</url>
      <content type="html"><![CDATA[<h2 id="1-匿名函数"><a href="#1-匿名函数" class="headerlink" title="1.匿名函数"></a>1.匿名函数</h2><p>只有<code>function(){}</code>没有名称标识符的就是匿名函数，优点是书写简单便捷，缺点是因为在内存栈中没有有意义的函数名，所以调试困难，另外就是没有函数名，就缺乏一个对该段代码的描述，降低了一定的可读性。</p>
<h2 id="2-回调函数"><a href="#2-回调函数" class="headerlink" title="2.回调函数"></a>2.回调函数</h2><p>回调函数是指传一个函数指针作为参数传到另一个函数中，另一个函数会在需要时执行这个函数的一种方式。</p>
<h2 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3.闭包"></a>3.闭包</h2><p><strong>闭包就是一种私有化变量的方法</strong>，比如：函数中嵌套函数，内部的函数可以使用外部函数的参数或变量，并且参数或变量不会被js垃圾回收机制收回。</p>
<p>当希望变量能长期驻扎在内存中，又不想设置其为全局变量（容易发生全局变量污染），可以用闭包来实现</p>
<p>又比如：通过一个自执行函数，将全局变量传到函数内部接受，就可以在函数内部私有化这个变量，而且不会影响外部<code>(function($){console,log($);})(jQuery)</code></p>
<h2 id="4-惰性载入"><a href="#4-惰性载入" class="headerlink" title="4.惰性载入"></a>4.惰性载入</h2><p>这是一种性能优化的思想，比如我们再执行一个函数时，该函数需要对浏览器的不同类型作出不同的反应，那么每次执行该函数都要执行一次判断就会很浪费性能，因为在页面浏览过程中也不会中途更换浏览器，所以可以在第一次执行函数时执行判断，然后就更新函数内容，这样就只判断一次，优化了性能。</p>
<p><strong>最好也不要把函数设置为在载入时自动执行判断来更新函数内容</strong>，打个比方，jQuery中有非常多的方法，内部会判断运行环境作兼容性处理，如果每一个函数都在载入时自动判断一次，那么就非常消耗性能，我们在使用jQuery时不会用到每一个功能，那么只有在使用这个功能时才进行兼容性的判断，那么就节约了性能，这也就是所谓的惰性载入的思想。</p>
<h2 id="5-this"><a href="#5-this" class="headerlink" title="5.this"></a>5.this</h2><p>在用面向对象的思想进行程序编写时，每一个this的指向是最大的难点，我们在编写时应该理清代码的顺序，同时注意一点：<strong>函数里的this指代的当前调用函数的对象，如果是最外层或者表面上没有人调用，那么this就指向window</strong>。</p>
<p>如果在一些函数内部的this不是我们希望指代的对象，我们可以通过传参数等方式将我们希望指代的对象传进去。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对JavaScript中一些概念的理解（一）]]></title>
      <url>http://yoursite.com/2015/08/27/JS01/</url>
      <content type="html"><![CDATA[<h2 id="1-对面向对象的理解"><a href="#1-对面向对象的理解" class="headerlink" title="1.对面向对象的理解"></a>1.对面向对象的理解</h2><p> 首先，对象是对实际事物的一个抽象，它包括了属性和方法两个概念，比如对于一个人来说，他的属性有姓名、身高、年龄等等，方法有吃饭，走路，跑步等等。对于万物都可以看作一个对象。</p>
<p> 在编程中主要分为<code>面向过程(pop)</code>和<code>面向对象(oop)</code>两大类，pop主要重视做事的过程，oop是关注参与者和他们的行为，形象一点说，比如我们在编写一段选项卡功能时，pop就是针对这一选项卡的功能来针对性地写代码，oop则是编写这一个选项卡对象，在编写难度上oop更高一些，但是它的特点在于可以复用代码，适合于模块化编写，一个页面中有多个选项卡都可以使用这一个对象，并为其增加个性化设置，而pop则需要根据不同选项卡进行多次代码编写，这也就是oop的好处。</p>
<h2 id="2-json"><a href="#2-json" class="headerlink" title="2.json"></a>2.json</h2><p>json是js对象表示法，它的内容以键值对的方式存在，它的主要用途在于存储和交换信息，我们前端工作中主要利用json字符串与后台服务器数据库进行数据交换，它的优点在于它是轻量级文本数据交换格式，可被多种程序语言解读，比XML更小更快更易解析，也天生是一个js对象。</p>
<p><strong>注意：json字符串中键名必须以双引号包裹，否则会在识别时出错</strong></p>
<h2 id="3-原型prototype"><a href="#3-原型prototype" class="headerlink" title="3.原型prototype"></a>3.原型prototype</h2><p>JS中各种类型的对象都有一个prototype属性，这个属性本身是一个object类型的对象，它包含了很多属性与方法，同时我们也可以为不同类型对象的prototype属性添加特定的属性与方法，如通过:<code>构造函数.prototype.方法 = function(){}</code>;</p>
<p><strong>注意：若在window.onload中对一些对象调用原型中的方法，但是这些方法是在这些代码下方设置的，就会报错。可以将这些设置prototype方法的代码写在window.onload外部或者写在内部的上方。</strong></p>
<h2 id="4-编译原理"><a href="#4-编译原理" class="headerlink" title="4.编译原理"></a>4.编译原理</h2><p>浏览器在解读JS代码时有一个顺序，首先会进行一次预编译，通过对var function等关键字的查询，找到变量或者函数，放到一个仓库中，变量先为其设置undefined为初始值，函数就存一个空的代码块，然后再逐行执行代码。</p>
<p><strong>注意：在逐行执行代码时，遇到赋值的时候会根据变量名对存在仓库中的变量或函数进行赋值，但是如果遇到变量与函数同名，则会用函数内容覆盖变量内容，如果遇到有同名的函数，就会用后载入的函数覆盖先载入的的。</strong></p>
<h2 id="5-递归函数"><a href="#5-递归函数" class="headerlink" title="5.递归函数"></a>5.递归函数</h2><p>简单来说，递归函数就是在函数中调用自身这个函数，递归必须有入口和出口，就是说什么时候调用自己，什么时候不调用，否则会形成死循环，递归主要用在解决树状结构类似问题，如读取文件目录，货品分类树等。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs中的Buffer类]]></title>
      <url>http://yoursite.com/2015/08/16/NodeJs02/</url>
      <content type="html"><![CDATA[<h3 id="1-Buffer-是什么"><a href="#1-Buffer-是什么" class="headerlink" title="1 Buffer 是什么?"></a>1 Buffer 是什么?</h3><p>所谓缓冲区Buffer，就是 “临时存贮区” 的意思，是暂时存放输入输出数据的一段内存。</p>
<p>JS语言自身只有字符串数据类型，没有二进制数据类型，因此NodeJS提供了一个与String对等的全局构造函数Buffer来提供对二进制数据的操作。</p>
<h3 id="2-Buffer-怎样用？"><a href="#2-Buffer-怎样用？" class="headerlink" title="2 Buffer 怎样用？"></a>2 Buffer 怎样用？</h3><p>Buffer的形式类似于数组，具有下标，长度等特性</p>
<h3 id="3-如何去创建？"><a href="#3-如何去创建？" class="headerlink" title="3 如何去创建？"></a>3 如何去创建？</h3><p><code>new Buffer(长度)</code>  可以根据下标来赋值<br><strong>注意：长度只要定义了就不能增加</strong></p>
<p><code>new Buffer(数组)</code>  把数组里面对应下标的值，赋值给Buffer对应下标的值</p>
<p><code>new Buffer(&quot;字符串&quot;，&quot;utf-8&quot;)</code> 向Buffer赋值字符串，需要设置编码</p>
<h3 id="4-Buffer与字符串的一点区别"><a href="#4-Buffer与字符串的一点区别" class="headerlink" title="4 Buffer与字符串的一点区别"></a>4 Buffer与字符串的一点区别</h3><p>Buffer与字符串有一个重要区别。字符串是只读的，并且对字符串的任何修改得到的都是一个新字符串，原字符串保持不变。</p>
<p>至于Buffer，更像是可以做指针操作的C语言数组。例如，可以用[index]方式直接修改某个位置的字节。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm与nrm的一些基础操作命令]]></title>
      <url>http://yoursite.com/2015/08/02/NodeJs01/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>工欲善其事，必先利其器，要顺利使用NodeJs的各种模块包，我们就必须熟悉npm及其换源工具nrm的操作指令</p>
</blockquote>
<h2 id="1-npm操作："><a href="#1-npm操作：" class="headerlink" title="1.npm操作："></a>1.npm操作：</h2><p><code>npm init</code> 初始化一个新的package.json<br><code>npm install 包名</code> 安装模块<br><code>npm install -g</code> 全局安装模块<br><code>npm install 包名称  --save-dev</code>  把当前安装的这个包自动添加到package.json的文件夹中<br><strong>注意：如果<code>npm install</code>后面没有给具体的包名称，就会默认去<code>package.json</code>下安装<code>devDependencies</code>下所有的包</strong><br><code>npm adduser 用户名</code> 登录npm<br><code>npm publish</code> 把当前路径的包发布到npm<br><strong>注意2：必须把源切换回npm才能登录和上传</strong><br><strong>注意3：如果包名字重合了，必须在package.json中修改name值再重新上传</strong></p>
<h2 id="2-npm换源插件nrm的操作："><a href="#2-npm换源插件nrm的操作：" class="headerlink" title="2.npm换源插件nrm的操作："></a>2.npm换源插件nrm的操作：</h2><blockquote>
<p>nrm很好地解决了国内使用npm官方源下载缓慢的问题，以下是它的常用使用命令</p>
</blockquote>
<p><code>npm install -g nrm</code> ：安装nrm<br><code>nrm ls</code> ： 显示源列表，源名前有#号的是正在使用的源<br><code>nrm use 源名</code> ：使用该源<br><code>nrm test 源名</code> ： 测试源响应时间</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World!]]></title>
      <url>http://yoursite.com/2015/07/29/hello/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“起初,神创造天地”“地是空虚混沌，渊面黑暗； 神的灵运行在水面上”“神说：“要有光。”就有了光”“神看光是好的，就把光暗分开了”“神称光为“昼”，称暗为“夜”。有晚上，有早晨，这是头一日”(创1:1-1:5)。</p>
</blockquote>
<p>The first article.<br>一切的开端。</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>http://yoursite.com/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是朱越。欢迎来到我的个人网站！<br>我搭建这个博客的目的在于记录我在学习编程技术过程中的收获、体会和总结，并分享给大家，如果我的文章对大家有一丝的帮助，我不胜荣幸。当然，偶尔也分享生活^.^</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>http://yoursite.com/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
